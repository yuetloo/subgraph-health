{"version":3,"sources":["App.tsx","reportWebVitals.ts","index.tsx"],"names":["noop","getQuery","subgraphName","query","StyledTextInput","styled","TextInput","props","height","App","useState","setSubgraphName","result","setResult","useViewport","console","log","useEffect","cancel","a","data","fetch","method","headers","body","JSON","stringify","response","json","jsonResult","getHealth","explorerUrl","useMemo","className","scrollView","primary","label","value","placeholder","wide","onChange","href","multiline","reportWebVitals","onPerfEntry","Function","then","getCLS","getFID","getFCP","getLCP","getTTFB","ReactDOM","render","StrictMode","document","getElementById"],"mappings":"2QAIA,SAASA,IACP,OAAO,KAGT,SAASC,EAASC,GAChB,MAAO,CACLC,MAAM,4DAAD,OACgDD,EADhD,0XAuGT,IAAME,EAAkBC,kBAAOC,YAAPD,CAAH,4CACT,SAACE,GAAD,gBAAcA,EAAMC,OAAS,IAA7B,SAGGC,EAjFf,WAAgB,IAAD,EAC2BC,mBAAS,gCADpC,mBACNR,EADM,KACQS,EADR,OAEeD,mBAAS,IAFxB,mBAENE,EAFM,KAEEC,EAFF,KAGLL,EAAWM,wBAAXN,OAERO,QAAQC,IAAI,SAAUR,GAEtBS,qBAAU,WACR,IAAIC,GAAS,EAyBb,OAvBe,uCAAG,gCAAAC,EAAA,yDACXjB,EADW,uBAEdW,EAAU,IAFI,iCAKVO,EAAOnB,EAASC,GALN,SAMOmB,MA7CX,8CA6C4B,CACtCC,OAAQ,OACRC,QAAS,CACP,eAAgB,oBAElBC,KAAMC,KAAKC,UAAUN,KAXP,UAMVO,EANU,OAcXT,EAdW,kCAeWS,EAASC,OAfpB,QAeRC,EAfQ,OAgBdd,QAAQC,IAAI,UAAWI,EAAMS,GAC7BhB,EAAUY,KAAKC,UAAUG,EAAY,KAAM,IAjB7B,4CAAH,oDAqBfC,GAEO,WACLZ,GAAS,KAEV,CAAChB,IAEJ,IAAM6B,EAAcC,mBAAQ,WAC1B,MAAM,iDAAN,OAAwD9B,KACvD,CAACA,IAEJ,OACE,qBAAK+B,UAAU,wBAAf,SACE,qBAAKA,UAAU,cAAf,SACE,eAAC,OAAD,CAAMC,YAAY,EAAlB,UACE,cAAC,SAAD,CAAQC,QAAQ,oBAChB,cAAC,QAAD,CAAOC,MAAM,gBAAb,SACE,cAAC,cAAD,CACEC,MAAOnC,EACPoC,YAAY,mDACZC,MAAI,EACJC,SAAU7B,MAGbT,GACC,qCACE,cAAC,QAAD,CAAOkC,MAAM,2BAAb,SACE,cAAC,OAAD,CAAMK,KAAMV,EAAZ,SAA0BA,MAE5B,cAAC,QAAD,CAAOK,MAAM,gBAAb,SACE,cAAChC,EAAD,CACEI,OAAQA,EACR6B,MAAOzB,EACP2B,MAAI,EACJG,WAAS,EACTF,SAAUxC,iBCxFb2C,EAZS,SAACC,GACnBA,GAAeA,aAAuBC,UACxC,8BAAqBC,MAAK,YAAkD,IAA/CC,EAA8C,EAA9CA,OAAQC,EAAsC,EAAtCA,OAAQC,EAA8B,EAA9BA,OAAQC,EAAsB,EAAtBA,OAAQC,EAAc,EAAdA,QAC3DJ,EAAOH,GACPI,EAAOJ,GACPK,EAAOL,GACPM,EAAON,GACPO,EAAQP,OCHdQ,IAASC,OACP,cAAC,IAAMC,WAAP,UACE,cAAC,EAAD,MAEFC,SAASC,eAAe,SAM1Bb,M","file":"static/js/main.258d6ef9.chunk.js","sourcesContent":["import { useEffect, useState, useMemo } from 'react';\nimport { Main, SearchInput, Header, TextInput, Link, Field, useViewport } from '@aragon/ui';\nimport styled from 'styled-components';\n\nfunction noop() {\n  return null;\n}\nconst GRAPH_URL = 'https://api.thegraph.com/index-node/graphql';\nfunction getQuery(subgraphName: string) {\n  return {\n    query: `\n      { indexingStatusForCurrentVersion(subgraphName: \"${subgraphName}\") {\n          synced\n          health\n          fatalError {\n            message\n            block {\n              number\n              hash\n            }\n            handler\n          }\n          chains {\n            chainHeadBlock {\n              number\n            }\n          latestBlock {\n            number\n          }\n        }\n      }\n    }\n  `,\n  };\n}\n\nfunction App() {\n  const [subgraphName, setSubgraphName] = useState('evalir/aragon-govern-rinkeby');\n  const [result, setResult] = useState('');\n  const { height } = useViewport();\n\n  console.log('height', height);\n\n  useEffect(() => {\n    let cancel = false;\n\n    const getHealth = async () => {\n      if (!subgraphName) {\n        setResult('');\n        return;\n      }\n      const data = getQuery(subgraphName);\n      const response = await fetch(GRAPH_URL, {\n        method: 'POST',\n        headers: {\n          'Content-Type': 'application/json',\n        },\n        body: JSON.stringify(data),\n      });\n\n      if (!cancel) {\n        const jsonResult = await response.json();\n        console.log('respnse', data, jsonResult);\n        setResult(JSON.stringify(jsonResult, null, 2));\n      }\n    };\n\n    getHealth();\n\n    return () => {\n      cancel = true;\n    };\n  }, [subgraphName]);\n\n  const explorerUrl = useMemo(() => {\n    return `https://thegraph.com/legacy-explorer/subgraph/${subgraphName}`;\n  }, [subgraphName]);\n\n  return (\n    <div className=\"scroll-view-container\">\n      <div className=\"scroll-view\">\n        <Main scrollView={false}>\n          <Header primary=\"Subgraph Health\" />\n          <Field label=\"Subgraph Name\">\n            <SearchInput\n              value={subgraphName}\n              placeholder=\"Subgraph name, i.e. evalir/aragon-govern-rinkeby\"\n              wide\n              onChange={setSubgraphName}\n            />\n          </Field>\n          {subgraphName && (\n            <>\n              <Field label=\"Subgraph legacy explorer\">\n                <Link href={explorerUrl}>{explorerUrl}</Link>\n              </Field>\n              <Field label=\"Health status\">\n                <StyledTextInput\n                  height={height}\n                  value={result}\n                  wide\n                  multiline\n                  onChange={noop}\n                ></StyledTextInput>\n              </Field>\n            </>\n          )}\n        </Main>\n      </div>\n    </div>\n  );\n}\n\nconst StyledTextInput = styled(TextInput)`\n  height: ${(props) => `${props.height - 300}px`};\n`;\n\nexport default App;\n","import { ReportHandler } from 'web-vitals';\n\nconst reportWebVitals = (onPerfEntry?: ReportHandler) => {\n  if (onPerfEntry && onPerfEntry instanceof Function) {\n    import('web-vitals').then(({ getCLS, getFID, getFCP, getLCP, getTTFB }) => {\n      getCLS(onPerfEntry);\n      getFID(onPerfEntry);\n      getFCP(onPerfEntry);\n      getLCP(onPerfEntry);\n      getTTFB(onPerfEntry);\n    });\n  }\n};\n\nexport default reportWebVitals;\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport reportWebVitals from './reportWebVitals';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root'),\n);\n\n// If you want to start measuring performance in your app, pass a function\n// to log results (for example: reportWebVitals(console.log))\n// or send to an analytics endpoint. Learn more: https://bit.ly/CRA-vitals\nreportWebVitals();\n"],"sourceRoot":""}